source('script1.r')
source('script1.r')
source('script1.r')
source('script1.r')
source('script1.r')
source('script1.r')
source('configuracoes.r')
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('configuracoes.r')
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
#PROBLEMAS A RESOLVER
#karliane - tentar pegar os resultados (acuracia) - ver base teste script alexandre
#alan - aprender como colocar os resultados em uma matriz e depois em um arquivo
#alan - incluir as demais bases nesse script
#karliane e alan - aprender a usar outros classificadores que n?o seja arvore
#dividir a base em treinamento e teste, o q eu fiz n?o t? certo.
#1 - transformar os atributos n?o num?ricos em num?ricos - tentar filtro weka - alan achou paleativo, usaremos de acordo com a necessidade
#2 - descobrir pq a confian?a da iris s? d? 1 - resolvido, n?o sei como...
#bases de dados
#bupa, cleveland, ecoli, glass, haberman, iris, monk, pima, vehide, wisconsin
#diret?rio local para salvar as bases e resultados
#fazer a instalação/carregamento de pacotes e definir diretório local
source('C:/local_R/projeto_karliane/configuracoes.R')
base_original
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
base_treino_self_training_rot
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
base$class
indice_treinamento <- createDataPartition(base_original$num, p=0.75, list=FALSE)
base_original
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
form <- cat(classe,'~','.')
form
x <- cat(classe,'~','.')
x
x <- c(classe,'~','.')
x
x <- c(cat((classe,'~','.'))
x <- c(cat(classe,'~','.'))
x
x <- factor(classe,'~','.')
x
x <- classe + '~' + '.')
x <- classe + '~' + '.'
?paste
x <- paste(classe,'~','.')
x
x <- paste(classe,'~','.', sep = "")
x
form <- paste(classe,'~', '.', sep="")
form
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
form <- as.formula(paste(classe,'~', '.'))
as.form
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
predict(model,base_teste,type='class')
base_original$class
base_teste$class
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
base_original[, classe]
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
base_original[, classe]
cat("\n Acerto (%) = \n", levels(base_original[, classe]), "\n", diag(matriz_confusao1) / colSums(matriz_confusao1) * 100)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
cat("\n Acerto (%) = \n", levels(base_original[, classe]), "\n", diag(matriz_confusao1) / colSums(matriz_confusao1) * 100)
levels(base_original[, classe])
levels(base_original[, "Species"])
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
levels(base_original[, "Species"])
levels(base_original[, classes])
levels(base_original[, as.character(classe)])
levels(base_original[, classe])
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
debugSource('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
View(data_arquivo)
debugSource('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
?data.frame
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
as.double(acc)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/treinamento.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/treinamento.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
base
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
?sample
ids_treino_rot <- sample(base,taxa_inicial, replace=FALSE)
ids_treino_rot <- sample.int(base,taxa_inicial, replace=FALSE)
base
nrow(base)
nrow(base_teste)
nrow(base_original)
exemplos <- base[indice_treinamento]
exemplos
indice_treinamento
x <- indice_treinamento
x
sample(x, taxa_inicial, replace = FALSE)
sample(x, 15, replace = FALSE)
exemplos <- indice_treinamento
ids_treino_rot <- sample(exemplos,taxa_inicial, replace=FALSE)
ids_treino_rot
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
debugSource('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
exemplos
taxa_inicial
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
debugSource('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
learn
form
data[sup,]
runLearner(learn,form,data[sup,])
debugSource('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
debugSource('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
debugSource('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
sup
data
base_original
base_treino_self_training_rot
base_treino_rot
ids_treino_rot
exemplos
ids_treino_rot <- sample(exemplos,taxa_inicial, replace=FALSE)
ids_treino_rot
base[ids_treino_rot,]
base_treino_rot <- base[ids_treino_rot,]
base_treino_rot
base_treino_sem_rot <- base[-ids_treino_rot,]
base_treino_sem_rot
base_treino_sem_rot$Species <- NA #para base IRIS
base_treino_sem_rot
base_treino_self_training_rot <- base_treino_rot
base_treino_self_training_sem_rot <- base_treino_sem_rot
dfs <- list(base_treino_self_training_rot, base_treino_self_training_sem_rot)
base_treino_self_training <- join_all(dfs, type="full")
base_treino_self_training
form <- as.formula(paste(classe,'~', '.'))
#  if (i==1) form <- Species~.  	#para base IRIS		  #OU form <- basetreinoselftraining$Species
#if (i==2) form <- class~.      #para base ECOLI
#  if(i==3) form <- selector~.    #para base puma
# if(i==4)form <- Type~. # para base glass
#if(i==5)form <- Survival_status~.# base haberman
#if (i==6) form <- class~.      #para base pima
#if(i==7) form <- num~. # para base cleveland
data <- base_treino_self_training	#base de dados
learn <- learner('rpartXse',list(se=0.5))
predFunc <- 'f'   			#Uma string com o nome de uma fun??o que ir? realizar as tarefas de classifica??o probabil?stica que ser?o necess?rias durante o processo de self-training
thrConf=0.9       			#taxa de confian?a dos exemplos a serem incluidos no conjunto de rotulados
maxIts=10					#n?mero m?ximo de itera??es
percFull=1					#Um n?mero entre 0 e 1. Se a porcentagem de exemplos rotulados atingir esse valor o processo de self-training ? parado
verbose=TRUE				#Um booleano indicando o n?vel de verbosidade?? (verbosity??) da fun??o
#adapta??o da implementa??o do selftrain
data
N <- NROW(data)
it <- 0
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
totalrot <- 0
sup <- which(!is.na(data[,as.character(form[[2]])])) #sup recebe o indice de todos os exemplos rotulados
it <- it+1
if (it>1) thrConf <- (thrConf + (soma_Conf/qtd_Exemplos_Rot) + (qtd_Exemplos_Rot/N))/3
soma_Conf <- 0
qtd_Exemplos_Rot <- 0
model <- runLearner(learn,form,data[sup,])
probPreds <- do.call(predFunc,list(model,data[-sup,]))
new <- which(probPreds[,2] > thrConf)
if (verbose) {
cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\t nr. added exs. =',length(new),'\n')
##guardando nas variaveis
it_g <-c(it_g,it)
bd_g <-c(bd_g,i)
thrConf_g<-c(thrConf_g,thrConf)
nr_added_exs_g<-c(nr_added_exs_g,length(new))
tx_g <- c(tx_g, taxa)
#    acc_g <- c(acc_g, acc)
##resultado <-  c(it,",",i,",",thrConf,",",length(new))
##write(resultado, file = "result")
}
data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
base_treino_self_training
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
indice_treinamento
source('C:/local_R/projeto_karliane/organiza_dados.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
?sample
exemplos
numeros <- c(1,2,45,63,29,100,999,23.45,76.1)
sample(numeros,size=10, replace=TRUE)
numeros <- c(1,2,45,63,29,100,999,23.45,76.1)
sample(numeros,size=10, replace=FALSE)
numeros <- c(1,2,45,63,29,100,999,23,45,76,1)
sample(numeros,size=10, replace=FALSE)
numeros <- c(1,2,45,63,29,100,999,23,45,76,1)
sample(numeros, size=10, replace=FALSE)
numeros <- c(1,2,45,63,29,100,999,23,45,76,10)
sample(numeros, size=10, replace=FALSE)
exemplos <- indice_treinamento
exemplos
sample(exemplos,taxa_inicial, replace=FALSE)
base[ids_treino_rot,]
base
taxa_inicial
ids_treino_rot <- 1
base
ids_treino_rot <- 3
base[ids_treino_rot,]
base[1,]
base[0,]
base[1,1]
base[0,0]
?which
which(ids_treino_rot, arr.ind = FALSE, useNames = TRUE)
?grep
head(iris)
getdata(iris)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
getdata(iris)
head(iris)
?head
tail(iris)
?rpart
?rpartXse
?rpart
